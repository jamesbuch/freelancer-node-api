// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String   @db.Text
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  categories Category[]
  comments  Comment[]
}

model Category {
  id    String   @id @default(uuid())
  name  String   @unique
  posts Post[]
  services Service[]
  jobs Job[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.Text
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Profile {
  id     String     @id @default(uuid())
  bio    String?    @db.Text
  avatar  String?
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
}

model Role {
  id   String @id @default(uuid())
  name String @unique
  users User[]
}

model TokenType {
  id   String @id @default(uuid())
  name String @unique
  tokens Token[]
}

model Token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      TokenType[]
  token     String   @unique
  expiresAt DateTime
}

model Skill {
  id   String @id @default(uuid())
  name String @unique
  users User[]
  jobs  Job[]
}

model Experience {
  id   String @id @default(uuid())
  name String @unique
  users User[]
}

model User {
  id      String   @id @default(uuid())
  email   String   @unique
  password_hash String
  name    String?
  userType String
  stripe_customer_id String?
  subscriber Boolean @default(false)
  subscription String?
  active Boolean @default(false)
  superAdmin Boolean @default(false)
  posts   Post[]
  comments  Comment[]
  profile Profile?
  roles    Role[]
  tokens  Token[]
  services Service[]
  jobs   Job[]
  skills Skill[]
  experiences Experience[]
  ratingsReceived Rating[] @relation(name: "userRating")
  ratingsGiven Rating[] @relation(name: "reviewer")
  applications Application[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id   String @id @default(uuid())
  name String @unique
  price Decimal
  description String @db.Text
  image String
  jobQueue Int
  jobQueueLimit Int
  featured Boolean @default(false)
  featuredCategories Category[]
  user User  @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id   String @id @default(uuid())
  name String @unique
  price Decimal
  budget Decimal
  description String @db.Text
  jobType String
  dueDate DateTime
  status  String
  multipleFreelancers Boolean
  freelancersRequired Int
  urgent Boolean    @default(false)
  featured Boolean  @default(false)
  featuredCategories Category[]
  requiredSkills Skill[]
  invoices Invoice[]
  applications Application[]
  user User  @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id   String @id @default(uuid())
  amount Decimal
  coverLetter String @db.Text
  status String
  delivery String
  sponsored Boolean     @default(false)
  sealed Boolean        @default(false)
  highlighted Boolean   @default(false)
  job Job  @relation(fields: [jobId], references: [id])
  jobId String
  user User  @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id   String @id @default(uuid())
  amount Decimal
  dueDate DateTime
  status String
  job Job  @relation(fields: [jobId], references: [id])
  jobId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id   String @id @default(uuid())
  rating Int
  comment String @db.Text
  user User  @relation(name: "userRating", fields: [userId], references: [id])
  userId String
  reviewer User  @relation(name: "reviewer", fields: [reviewerId], references: [id])
  reviewerId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
